---
- hosts: localhost
  tasks:
    - name: Install homebrew
      include_role:
        name: geerlingguy.mac.homebrew

    - name: Make sure homebrew bin is in path
      ansible.builtin.lineinfile:
        path: /etc/paths
        state: present
        line: '/opt/homebrew/bin'
      become: true
      become_user: root

    - name: 'add custom homebrew repos'
      community.general.homebrew_tap:
        name: [
          adoptopenjdk/openjdk,
          homebrew/cask-versions,
          thoughtbot/formulae,
          weaveworks/tap,
          hashicorp/tap
        ]

    - name: Install core packages via brew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
      ignore_errors: yes
      with_items:
        # - datagrip
        - 1password
        - slack
        - zoom
        - tuple
        - docker
        - google-chrome
        - iterm2
        - sublime-text
        # - telegram
        - visual-studio-code
        # - vlc

    - name: "Install homebrew packages"
      community.general.homebrew:
        name: [
          'autoconf',
          'automake',
          'aws-iam-authenticator',
          'awscli',
          'atuin',
          'bfg',
          'coreutils',
          'curl',
          'direnv',
          'dnsmasq',
          'fzf',
          'gnu-time',
          'gh',
          'htop',
          'libtool',
          'libxslt',
          'libyaml',
          'openssl' ,
          'readline',
          'unzip',
          'zlib',
          'zsh',
          'tldr',
          'starship',
          'derailed/k9s/k9s',
          'kubecm',
          'spacelift-io/spacelift/spacectl',
          'hashicorp/tap/vault',
          'hashicorp/tap/terraform'
        ]
        state: present
        update_homebrew: yes


    - name: Get the path to ZSH
      become: false
      local_action: command which zsh
      register: zsh_path

    - name: "Ensure homebrew zsh is in allowed shells"
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path.stdout }}"
      become: true

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"

    - name: Set ZSH as the default shell
      shell: chsh -s $(which zsh) {{ lookup('env', 'USER') }}
      become: true

    - name: "Create a default ZSH configuration"
      template:
        src: templates/.zshrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.zshrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create a default VSCode configuration
      template:
        src: templates/vscode-settings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/settings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create a default VSCode keuybinding configuration
      template:
        src: templates/vscode-keybindings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/keybindings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes 

    - git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "/Users/{{ lookup('env', 'USER') }}/.asdf"
        version: v0.14.0

    - name: "Create a default asdf configuration"
      template:
        src: templates/.asdfrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: "Install asdf plugins"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf plugin-add {{ item }} || exit 0
      with_items:
        - python

    - name: "Install Default Python"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install python 3.12.2
        asdf global python 3.12.2
        pip3 install ansible
        asdf reshim python
        
    - name: "Setup pipx and venv and atuin and starship"
      shell: |
        echo '/neval "$(atuin init zsh)"/neval "$(starship init zsh)"/nexport STARSHIP_CONFIG=~/.config/starship.toml/n' >> /Users/{{ lookup('env', 'USER') }}/.zshrc
        pip install --user pipx
        pipx ensurepath
        source /Users/{{ lookup('env', 'USER') }}/.zshrc
        pipx install virtualenv
        mkdir /Users/{{ lookup('env', 'USER') }}/venv
    
    - name: Copy ~/.config/starship.toml
      copy:
        src: copy_files/starship.toml
        dest: /Users/{{ lookup('env', 'USER') }}/.config/starship.toml
        owner: "{{ lookup ('env', 'USER') }}"

    # AVANT STUFF
    - name: Make github directory
      shell: |
        mkdir /Users/{{ lookup('env', 'USER') }}/Desktop/github

    - name: Add venv() function to zshrc
      blockinfile:
        path: "/Users/{{ lookup('env', 'USER') }}/.zshrc"
        block: |
          function venv() {
              local env_name="$1"
              local venv_path="$HOME/venv/$env_name"

              if [ -d "$venv_path" ]; then
                  # If the virtual environment exists, activate it
                  source "$venv_path/bin/activate"
              else
                  # If the virtual environment doesn't exist, create it and activate it
                  virtualenv "$venv_path"
                  source "$venv_path/bin/activate"
              fi
          }

          alias pip=pip3
          #AVANT
          export AD_USERNAME=ayjain25
          export GLOBAL_VAULT_ADDR=https://vault.services.global.avant.com
          function vault-global-login {
            vault_addr=$GLOBAL_VAULT_ADDR
            export VAULT_ADDR=${vault_addr}
            vault login -method=ldap username=${AD_USERNAME}
          }

          # AWS Aliases
          alias aws-whoami="aws sts get-caller-identity"
          alias assume-avant-prd-app="source ~/.assume-avant-prd-app.sh"
          alias assume-avant-prd-ds='source ~/.assume-avant-prd-ds.sh'
          alias unassume-aws-role='source ~/.unassume-aws-role.sh'

          #EKS Aliases
          alias kc=kubecm
          alias list-eks="aws eks list-clusters"
          alias add-eks="aws eks update-kubeconfig --name "

          #Vault Aliases
          alias vlogin="vault login -method ldap -no-print"

          #Spacelift aliases
          alias get-space-stack='export MY_STACK_ID=$(spacectl stack list | fzf | awk -F"|" "{print \$1}" | awk "{\$1=\$1};1")'
          alias space-stack-lp='spacectl stack local-preview --id $MY_STACK_ID' 

    - name: Add assume-avant-prd files
      shell:
        mkdir /Users/{{ lookup('env', 'USER') }}/.assume-avant-prd-app.sh
        mkdir /Users/{{ lookup('env', 'USER') }}/.assume-avant-prd-ds.sh
        mkdir /Users/{{ lookup('env', 'USER') }}/.unassume-aws-role.sh
        
    - name: Add assume-avant-prd-app.sh
      blockinfile:
        path: "/Users/{{ lookup('env', 'USER') }}/.assume-avant-prd-app.sh"
        block: |
          #!/bin/bash

          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN

          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::005228414382:role/OrganizationAccountAccessRole --role-session-name OrganizationRole --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" --output text)

          export AWS_ACCESS_KEY_ID=$(echo ${CREDS}| cut -f1 -d$'\t')
          export AWS_SECRET_ACCESS_KEY=$(echo ${CREDS}| cut -f2 -d$'\t')
          export AWS_SESSION_TOKEN=$(echo ${CREDS}| cut -f3 -d$'\t')

    - name: Add assume-avant-prd-ds.sh
      blockinfile:
        path: "/Users/{{ lookup('env', 'USER') }}/.assume-avant-prd-ds.sh"
        block: |
          #!/bin/bash

          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN

          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::654641313688:role/OrganizationAccountAccessRole --role-session-name OrganizationRole --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" --output text)

          export AWS_ACCESS_KEY_ID=$(echo ${CREDS}| cut -f1 -d$'\t')
          export AWS_SECRET_ACCESS_KEY=$(echo ${CREDS}| cut -f2 -d$'\t')
          export AWS_SESSION_TOKEN=$(echo ${CREDS}| cut -f3 -d$'\t')
    
    - name: Add unassume-aws-role.sh
      blockinfile:
        path: "/Users/{{ lookup('env', 'USER') }}/.unassume-aws-role.sh"
        block: |
          #!/bin/bash

          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN

    - name: Create ssh key for github
      shell: |
        mkdir /Users/{{ lookup('env', 'USER') }}/.ssh
        touch /Users/{{ lookup('env', 'USER') }}/.ssh/config
        # DO THE FOLLOWING
        # cd ~/.ssh
        # ssh-keygen -t ed25519 -C "aayush.jain@avant.com"
        # ssh-add --apple-use-keychain ~/.ssh/github
        # pbcopy < ~/.ssh/github.pub 
        # copy the ssh key to github->settings->ssh keys

    
        

